team-90


Suppose the CS122B team 999 contains 2 members (Bob and Alice). We will see how they use Git to collaborate in the CS122B class.

Setting up Git:

    Each student creates a github account, and shares his/her github username with the CS122B staff on this ​ (Links to an external site.)spreadsheet (Links to an external site.).
    The staff will send each of them an invitation to join the “UCI-chenli-teaching” organization. Both accept the invitation and are added to the organisation.
    Bob creates a repository called “cs122b-spring20-team-999” on Github.com under this organization. Make sure to make it “private” (default setting). The repository is initially empty.

Using Git:

    On his local machine, Bob installs a Git client by following the instructions ​here (Links to an external site.).
    He then does the following:

shell> mkdir mycs122b-projects
shell> cd mycs122b-projects
shell> git init
shell> echo "Cool project" > README.md          - creates a README file
shell> git status          - check the status of the repository
shell> git add README.md          - The file is initially untracked by Git. 'git add' moves it to staged.
shell> git status           - check the status of the repository after staging the file
shell> git commit -m "First Commit"          - The staged files are committed locally.
shell> git status          - check the status of the repository after committing the file

    The local repository now has to be linked to the remote repository. For that Bob does the following:

shell> git remote add origin https://github.com/UCI-Chenli-teaching/cs122b-spring20-team-999.git 
shell> git push -u origin master

    Bob now wants to start on project 1. He creates a new branch from the master branch for this task.

shell> git branch            - This command is used to check which branch you are on and what branches are there in your repository. master should be highlighted as you are on master branch. 
shell> git checkout -b bob-feature1            - This command creates a new branch and copies all the code from the previous (i.e. master in our case) branch into the new branch. 
shell> mkdir project1 
shell> cd project1 
shell> echo "SELECT * FROM stars" > mysql-script.sql 
shell> git add mysql-script.sql 
shell> git commit -m "added mysql command"   - commits changes locally to bob-feature1 
shell> git push --set-upstream origin bob-feature1   - creates a remote tracking branch
shell>

    Alice wants to contribute too. First Bob needs to invite Alice as a contributor to this repository on the Github web site. Then she can see the repository. She does the following (i.e. ON HER MACHINE):

shell> mkdir gitclones 
shell> cd gitclones 
shell> git clone https://<Alice's username>@github.com/UCI-Chenli-teaching/cs122b-spring20-team-999.git             - brings the repository onto her local machine 
shell> cd cs122b-spring20-team-999 
shell> git checkout bob-feature1    - Change from the master branch to the branch bob-feature1 branch. 
shell> cd project1
shell> echo " heh heh heh :D appending some stuff" >> mysql-script.sql
shell> git add mysql-script.sql 
shell> git status
shell> git config  user.email "alince@alice.com"
shell> git config  user.name "Alice Smith"
shell> git commit -m "minor changes" 
shell> git push             - pushes the commit to bob-feature1 remote branch
shell>

    Bob wants to continue coding. Before proceeding to modify any files, he needs to do 'git pull' so that the local branch pulls the latest code from the remote branch. In particular, Bob does:

shell> git branch        - to see which branch he is on. He sees he is on bob-feature1 branch. 
shell> git pull             - pulls the latest code. Bob now sees the changes that Alice pushed.

    Bob and Alice can also use github to create a pull request from the bob-feature1 branch to the master branch to do code reviews. Check this 
    ​video (Links to an external site.)
     to learn this process.
https://www.youtube.com/watch?v=oFYyTZwMyAg

